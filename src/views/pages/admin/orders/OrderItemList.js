// ** MUI Imports
import Paper from "@mui/material/Paper";
import Table from "@mui/material/Table";
import TableRow from "@mui/material/TableRow";
import TableHead from "@mui/material/TableHead";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import Chip from "src/@core/components/mui/chip";
import Link from "next/link";
import Typography from "@mui/material/Typography";
// ** MUI Imports
import Box from "@mui/material/Box";
import Tooltip from "@mui/material/Tooltip";
import IconButton from "@mui/material/IconButton";
import OptionsMenu from "src/@core/components/option-menu";
// ** Icon Imports
import Icon from "src/@core/components/icon";
import WarningDialog from "src/views/components/dialogs/WarningDialog";
import { useEffect, useRef, useState } from "react";
import Pagination from "@mui/material/Pagination";
import Stack from "@mui/material/Stack";
import Iconify from "@iconify/iconify";
import MessageDialog from "src/views/components/dialogs/MessageDialog";
import { changeOrder, getOrders } from "src/helpers/orderHelper";
import toast from "react-hot-toast";
import { useRouter } from "next/router";
import { useAuth } from "src/hooks/useAuth";
import FallbackSpinner from "src/@core/components/spinner";
import { ListItem } from "@mui/material";
import { formatDateToLocalDatString } from "src/helpers/menuHelper";

const createData = (name, calories, fat, carbs, protein, status) => {
  return { name, calories, fat, carbs, protein, status };
};

const rows = [
  createData(
    "#5089",
    "Jamal Kerrod ",
    "Waterloo",
    "07/08/2024",
    "Chicken Tikka",
    "Processsing"
  ),
  createData(
    "#5089",
    "Jamal Kerrod ",
    "Waterloo",
    "07/08/2024",
    "Chicken Tikka",
    "Processsing"
  ),
];

const OrderItemList = ({ orders, handleChange, fetchOrders, date }) => {
  const [open, setOpen] = useState(false);
  const [type, setType] = useState("");
  const [title, setTitle] = useState("");
  const [display, setdisplay] = useState("none");
  const [message, setMessage] = useState("");
  const [itemId, setItemId] = useState("");
  const tableRef = useRef();
  const router = useRouter();
  const { loading, setLoading } = useAuth();
  // const handlePrint = () => {
  //   setOpen(true)
  //   setType('success')
  //   setTitle('Print Order')
  //   setMessage('Printed Successfully')
  // }

  const handlePrint = () => {
    const printContents = tableRef.current.outerHTML; // Get the table HTML
    const originalContents = document.body.innerHTML;

    // Store the current page's HTML

    let logoHTML = `
       <div>  
<div class="MuiGrid-root MuiGrid-container css-11lq3yg-MuiGrid-root"><div class="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-8 css-nlqb02-MuiGrid-root"><div class="MuiBox-root css-j7qwjs"><div class="MuiBox-root css-1c971cu">
<svg width="170" height="26" viewBox="0 0 170 26" fill="none" xmlns="http://www.w3.org/2000/svg"><mask id="path-1-outside-1_79_9250" maskUnits="userSpaceOnUse" x="0" y="0" width="170" height="26" fill="black"><rect fill="white" width="170" height="26"></rect><path d="M26.3326 16.7041C26.702 18.182 27.273 19.6598 27.4745 21.1711C27.5417 21.7085 26.87 21.9436 26.5005 21.7421L26.1982 21.5742C26.0303 21.6414 25.896 21.7421 25.728 21.8429C25.6273 22.1116 25.3586 22.2123 25.0899 22.1787C21.0595 24.3283 16.3574 25.5374 11.8233 24.6306C8.56536 23.9588 5.509 22.1787 3.7625 19.3239C2.38546 18.1148 1.37787 16.637 1.10917 14.8233C0.672551 12.0356 1.57938 8.84492 3.22512 6.59463C4.87086 4.41151 7.18832 2.90012 9.77448 1.9597C14.5773 0.280377 20.0855 1.12004 25.0899 2.09404C25.1571 2.09404 25.1907 2.12763 25.2578 2.12763C25.6609 2.1948 25.7616 2.53067 25.6945 2.83295C25.7616 3.13522 25.6273 3.50467 25.2578 3.60543C25.2242 3.60543 25.1907 3.60543 25.1571 3.63902L26.1311 4.04206C26.7356 4.31075 26.3998 5.25117 25.7952 5.25117C23.2762 5.21758 20.9252 4.37792 18.507 3.2024C15.7193 2.90012 12.898 3.16881 10.5134 4.20999C7.89364 5.35193 5.54259 7.19918 4.40065 9.85251C3.22512 12.5394 3.25871 15.7637 4.66934 18.3163C5.87845 19.4247 7.32267 20.2643 8.76688 20.9025C11.4874 22.078 14.5102 22.7497 17.4658 22.7161C19.8168 22.7161 22.4702 22.3131 24.1831 20.533C24.0487 19.9284 23.9815 19.3239 24.0487 18.7193C24.1495 17.6782 24.3174 16.637 24.3174 15.5958C24.3174 15.2599 24.5189 15.0584 24.754 14.9912C24.754 14.6554 24.7876 14.3195 24.7876 13.9836C22.235 14.3867 19.5145 14.0844 16.9284 14.0844C16.1223 14.0844 16.1223 12.7745 16.9284 12.7745H17.1299C16.962 12.4051 17.1635 11.8677 17.7009 11.8677C20.2534 11.8677 22.7724 11.7334 25.325 12.0692C25.4593 12.1028 25.5601 12.1364 25.6273 12.2036C26.0303 12.17 26.4334 12.1364 26.8364 12.0692C27.6761 11.9685 27.9447 13.0096 27.1723 13.3119C26.8364 13.4463 26.5341 13.547 26.1982 13.6478C26.299 14.689 26.3326 15.6966 26.3326 16.7041Z"></path><path d="M58.415 22.9176C59.4898 22.9512 59.4898 24.597 58.415 24.597C54.8884 24.597 52.2015 21.8429 49.884 19.4582C48.8429 18.3835 47.8353 17.2415 46.6262 16.3683C45.988 15.8981 45.2827 15.4279 44.5438 15.2263C42.5286 15.2599 40.144 15.092 37.625 14.8233V14.8905C37.7257 18.2491 38.2295 21.4063 36.8861 24.597C36.651 25.1343 35.6434 25.1343 35.4083 24.597C33.8633 21.0368 34.5686 17.3087 34.7701 13.6142C34.9381 9.8861 34.5686 6.82973 34.6694 3.10164C34.703 2.22839 35.8449 2.06046 36.2144 2.63143C36.2815 2.59784 36.3151 2.59784 36.3487 2.56425C38.3303 1.55666 40.7821 1.38873 42.9652 1.42232C45.6521 1.4559 48.4062 1.82535 50.9924 2.63143C53.1419 3.30316 55.6273 4.31075 56.87 6.32594C58.1463 8.44188 57.5082 11.3303 55.6273 12.6738C53.8808 13.9165 51.4962 14.5546 49.078 14.8569C49.3467 14.9912 49.6153 15.1592 49.884 15.3607C51.0931 16.2339 51.9328 17.4431 52.9068 18.5514C53.8472 19.559 54.519 20.0628 55.5601 21.4063C55.9968 21.9772 57.2059 22.8841 58.415 22.9176ZM37.4906 5.58704C37.8265 8.24036 37.625 10.4907 37.5914 12.9761C40.144 13.144 42.7637 13.4127 45.3499 13.3791C48.1711 13.1776 51.026 12.5394 53.0076 11.0952C53.545 10.6922 54.0152 10.0876 54.2167 9.44948C54.351 9.08003 54.4182 8.74416 54.351 8.50906C54.1495 7.77015 53.5114 7.1656 52.7725 6.72897C50.4886 5.35193 47.6337 4.78096 45.014 4.44509C42.5286 4.14282 39.8417 3.90771 37.3563 4.37792C37.054 4.44509 37.4235 5.11683 37.4906 5.58704Z"></path><path d="M87.2539 2.12763C87.4555 3.70619 87.657 5.48628 87.4891 7.19918C87.5226 8.10602 87.489 9.01285 87.3547 9.8861C87.3211 10.1212 87.1868 10.2556 86.9852 10.3227C87.0188 12.0356 86.9852 13.7485 86.7837 15.4279C86.5486 17.3087 86.0784 19.1895 85.0708 20.8017C84.6006 21.6078 84.0632 22.3467 83.2236 22.7497C82.7198 22.9512 82.216 23.1192 81.6786 23.2535L81.3091 23.455C78.1184 25.2351 73.853 25.2351 70.5279 23.7573C66.9677 22.1787 64.8182 18.6186 64.0793 14.8569C63.2396 10.625 63.9114 6.22518 63.9114 1.9597C63.9114 1.05287 65.322 0.985691 65.322 1.9597V2.56425C65.5571 2.22839 66.4639 2.02687 66.4639 3.26957C66.4639 5.55345 66.7998 10.7929 67.27 13.0096C67.673 14.8905 67.7066 17.1408 68.7142 18.8201C69.8562 20.8017 71.9049 21.5406 74.0545 21.7757C76.0361 22.0108 78.0848 22.1787 80.0664 22.0444C80.3687 22.0108 80.7382 22.0108 81.1076 21.9436C82.8541 20.7345 83.7945 18.8201 84.2647 16.8049C84.8021 14.5546 84.9029 12.2036 84.8693 9.85251C84.735 9.71817 84.6342 9.55024 84.6342 9.34872V8.50906C83.7945 6.56104 83.9625 4.00847 83.7945 1.99329C83.7609 1.2208 84.735 1.15362 85.1044 1.65742C85.4067 2.06046 85.6418 2.53067 85.8433 3.00088V2.12763C85.8433 1.18721 87.1196 1.25438 87.2539 2.12763Z"></path><path d="M118.401 17.3423C118.468 19.8613 116.722 22.1787 114.438 23.1527C111.751 24.2611 108.762 24.2947 105.907 24.1939C104.328 24.429 102.716 24.597 101.137 24.6306C100.163 24.6641 99.1559 24.6977 98.1483 24.5634C97.7117 24.4962 97.2414 24.429 96.8384 24.2275C96.5025 24.4962 95.8644 24.3619 95.8308 23.7909C95.8308 23.6565 95.8308 23.4886 95.7972 23.3543C95.5621 23.2871 95.327 23.1192 95.2934 22.7833C94.8904 19.156 94.5881 15.4615 94.5881 11.7669V11.599C94.5881 8.50906 94.8568 5.38552 95.4949 2.36274C95.4278 2.06046 95.5285 1.72459 95.8308 1.62383C95.9652 1.52308 96.1667 1.48949 96.3346 1.52308C98.9208 1.35514 101.574 1.2208 104.16 1.42232C106.612 1.62383 109.299 2.02687 111.314 3.57185C111.684 3.84054 112.187 4.54585 112.691 5.45269C113.229 5.85573 113.699 6.39311 114.001 6.99767C114.438 7.87091 114.438 8.77775 114.169 9.61741C114.303 10.6922 114.068 11.5318 113.229 11.7669C113.833 12.0356 114.438 12.3043 115.009 12.6402C116.755 13.6142 118.367 15.1928 118.401 17.3423ZM112.255 7.19918C112.154 6.93049 112.019 6.6618 111.885 6.4267C110.81 5.48628 109.366 4.94889 108.056 4.51227C106.008 3.87413 103.858 3.80695 101.708 3.63902C100.13 3.53826 98.4841 3.50467 96.9392 3.87413C97.1743 6.15801 97.2414 8.13961 97.2079 10.4571C99.5253 9.91969 102.111 9.95327 104.362 10.0876C106.814 10.1884 109.433 10.4907 111.852 11.2631C111.818 11.0952 111.885 10.9273 112.019 10.7593C112.389 10.3563 112.725 9.8861 112.926 9.3823C112.792 8.54264 112.355 7.46788 112.255 7.19918ZM97.0063 22.8841C99.9284 22.5146 102.985 22.9176 105.94 23.0184C108.258 22.6825 110.609 22.1452 112.792 21.3391C114.203 20.8017 116.789 19.8949 116.856 18.0476C116.957 15.7301 114.774 14.3531 112.826 13.5806C110.172 12.5394 107.217 12.1364 104.362 12.0356C102.078 11.9685 99.5925 11.9349 97.4094 12.7409C97.3086 12.7745 97.2079 12.7745 97.1407 12.7745C97.0399 15.9652 96.9056 19.1224 96.9728 22.2795C96.9728 22.481 97.0063 22.6825 97.0063 22.8841Z"></path><path d="M140.118 2.12763C140.924 2.12763 140.924 3.37033 140.118 3.40392C136.961 3.47109 133.77 3.50467 130.613 3.53826C130.58 4.00847 130.58 4.47868 130.546 4.94889C130.68 4.98248 130.781 5.01607 130.882 5.11683C132.662 6.76256 132.091 9.91969 131.99 12.7409C131.856 15.9317 131.688 19.1895 131.99 22.3803C133.871 22.3131 135.718 22.3131 137.633 22.1787C137.868 22.1452 138.137 22.1116 138.405 22.1116C138.909 22.1116 139.077 22.5818 138.943 22.9512C139.144 22.9512 139.312 22.9176 139.514 22.9176C140.32 22.8505 140.32 24.0932 139.514 24.1603C135.181 24.5298 130.848 24.1268 126.516 24.3954C126.18 24.3954 126.012 24.2275 125.945 23.9924H125.508C124.131 24.0596 122.687 24.1939 121.377 23.7909C120.604 23.5894 120.94 22.3803 121.713 22.5818C123.056 22.9848 124.601 22.7833 125.978 22.7497C127.221 22.6825 128.464 22.6154 129.74 22.5146C129.673 22.4138 129.606 22.3131 129.606 22.1787C129.236 18.4506 129.169 14.4539 129.203 10.5242C129.068 8.17319 129.035 5.78855 129.303 3.57185C127.624 3.57185 125.911 3.60543 121.377 3.60543C120.907 3.60543 120.672 3.13522 120.806 2.76577C120.302 2.53067 120.537 1.59025 121.142 1.59025H121.31C126.381 1.59025 131.554 2.1948 136.592 1.48949C137.062 1.42232 137.364 1.82535 137.398 2.1948C138.305 2.16122 139.211 2.16122 140.118 2.12763Z"></path><path d="M167.886 3.26957C168.692 3.30316 168.692 4.54585 167.886 4.51227L157.038 4.31075C157.138 6.39311 157.239 8.44188 157.306 10.5242C157.508 11.599 157.642 12.6738 157.777 13.7485C158.112 16.7377 157.944 19.7269 158.18 22.7161C158.247 23.1527 157.877 23.3543 157.541 23.3207C157.541 23.5222 157.575 23.6901 157.609 23.8916C157.709 24.6641 156.5 25 156.4 24.2275V24.1268C156.064 24.4626 155.425 24.4962 155.325 23.9252C154.216 17.4431 154.855 10.8601 154.855 4.27716C151.026 4.20999 147.197 4.1764 143.368 4.1764C142.562 4.1764 142.562 2.93371 143.368 2.90012C143.67 2.90012 143.939 2.86653 144.208 2.83295C144.107 2.4635 144.443 1.92611 144.98 1.99329C148.607 2.49708 152.268 2.1948 155.929 1.89253C156.131 1.75818 156.433 1.72459 156.635 1.85894C160.329 1.55666 163.99 1.32156 167.651 1.92611C168.155 2.02687 168.256 2.83295 167.785 3.06805L167.349 3.26957H167.886Z"></path></mask><path d="M26.3326 16.7041C26.702 18.182 27.273 19.6598 27.4745 21.1711C27.5417 21.7085 26.87 21.9436 26.5005 21.7421L26.1982 21.5742C26.0303 21.6414 25.896 21.7421 25.728 21.8429C25.6273 22.1116 25.3586 22.2123 25.0899 22.1787C21.0595 24.3283 16.3574 25.5374 11.8233 24.6306C8.56536 23.9588 5.509 22.1787 3.7625 19.3239C2.38546 18.1148 1.37787 16.637 1.10917 14.8233C0.672551 12.0356 1.57938 8.84492 3.22512 6.59463C4.87086 4.41151 7.18832 2.90012 9.77448 1.9597C14.5773 0.280377 20.0855 1.12004 25.0899 2.09404C25.1571 2.09404 25.1907 2.12763 25.2578 2.12763C25.6609 2.1948 25.7616 2.53067 25.6945 2.83295C25.7616 3.13522 25.6273 3.50467 25.2578 3.60543C25.2242 3.60543 25.1907 3.60543 25.1571 3.63902L26.1311 4.04206C26.7356 4.31075 26.3998 5.25117 25.7952 5.25117C23.2762 5.21758 20.9252 4.37792 18.507 3.2024C15.7193 2.90012 12.898 3.16881 10.5134 4.20999C7.89364 5.35193 5.54259 7.19918 4.40065 9.85251C3.22512 12.5394 3.25871 15.7637 4.66934 18.3163C5.87845 19.4247 7.32267 20.2643 8.76688 20.9025C11.4874 22.078 14.5102 22.7497 17.4658 22.7161C19.8168 22.7161 22.4702 22.3131 24.1831 20.533C24.0487 19.9284 23.9815 19.3239 24.0487 18.7193C24.1495 17.6782 24.3174 16.637 24.3174 15.5958C24.3174 15.2599 24.5189 15.0584 24.754 14.9912C24.754 14.6554 24.7876 14.3195 24.7876 13.9836C22.235 14.3867 19.5145 14.0844 16.9284 14.0844C16.1223 14.0844 16.1223 12.7745 16.9284 12.7745H17.1299C16.962 12.4051 17.1635 11.8677 17.7009 11.8677C20.2534 11.8677 22.7724 11.7334 25.325 12.0692C25.4593 12.1028 25.5601 12.1364 25.6273 12.2036C26.0303 12.17 26.4334 12.1364 26.8364 12.0692C27.6761 11.9685 27.9447 13.0096 27.1723 13.3119C26.8364 13.4463 26.5341 13.547 26.1982 13.6478C26.299 14.689 26.3326 15.6966 26.3326 16.7041Z" fill="#F56700"></path><path d="M58.415 22.9176C59.4898 22.9512 59.4898 24.597 58.415 24.597C54.8884 24.597 52.2015 21.8429 49.884 19.4582C48.8429 18.3835 47.8353 17.2415 46.6262 16.3683C45.988 15.8981 45.2827 15.4279 44.5438 15.2263C42.5286 15.2599 40.144 15.092 37.625 14.8233V14.8905C37.7257 18.2491 38.2295 21.4063 36.8861 24.597C36.651 25.1343 35.6434 25.1343 35.4083 24.597C33.8633 21.0368 34.5686 17.3087 34.7701 13.6142C34.9381 9.8861 34.5686 6.82973 34.6694 3.10164C34.703 2.22839 35.8449 2.06046 36.2144 2.63143C36.2815 2.59784 36.3151 2.59784 36.3487 2.56425C38.3303 1.55666 40.7821 1.38873 42.9652 1.42232C45.6521 1.4559 48.4062 1.82535 50.9924 2.63143C53.1419 3.30316 55.6273 4.31075 56.87 6.32594C58.1463 8.44188 57.5082 11.3303 55.6273 12.6738C53.8808 13.9165 51.4962 14.5546 49.078 14.8569C49.3467 14.9912 49.6153 15.1592 49.884 15.3607C51.0931 16.2339 51.9328 17.4431 52.9068 18.5514C53.8472 19.559 54.519 20.0628 55.5601 21.4063C55.9968 21.9772 57.2059 22.8841 58.415 22.9176ZM37.4906 5.58704C37.8265 8.24036 37.625 10.4907 37.5914 12.9761C40.144 13.144 42.7637 13.4127 45.3499 13.3791C48.1711 13.1776 51.026 12.5394 53.0076 11.0952C53.545 10.6922 54.0152 10.0876 54.2167 9.44948C54.351 9.08003 54.4182 8.74416 54.351 8.50906C54.1495 7.77015 53.5114 7.1656 52.7725 6.72897C50.4886 5.35193 47.6337 4.78096 45.014 4.44509C42.5286 4.14282 39.8417 3.90771 37.3563 4.37792C37.054 4.44509 37.4235 5.11683 37.4906 5.58704Z" fill="#F56700"></path><path d="M87.2539 2.12763C87.4555 3.70619 87.657 5.48628 87.4891 7.19918C87.5226 8.10602 87.489 9.01285 87.3547 9.8861C87.3211 10.1212 87.1868 10.2556 86.9852 10.3227C87.0188 12.0356 86.9852 13.7485 86.7837 15.4279C86.5486 17.3087 86.0784 19.1895 85.0708 20.8017C84.6006 21.6078 84.0632 22.3467 83.2236 22.7497C82.7198 22.9512 82.216 23.1192 81.6786 23.2535L81.3091 23.455C78.1184 25.2351 73.853 25.2351 70.5279 23.7573C66.9677 22.1787 64.8182 18.6186 64.0793 14.8569C63.2396 10.625 63.9114 6.22518 63.9114 1.9597C63.9114 1.05287 65.322 0.985691 65.322 1.9597V2.56425C65.5571 2.22839 66.4639 2.02687 66.4639 3.26957C66.4639 5.55345 66.7998 10.7929 67.27 13.0096C67.673 14.8905 67.7066 17.1408 68.7142 18.8201C69.8562 20.8017 71.9049 21.5406 74.0545 21.7757C76.0361 22.0108 78.0848 22.1787 80.0664 22.0444C80.3687 22.0108 80.7382 22.0108 81.1076 21.9436C82.8541 20.7345 83.7945 18.8201 84.2647 16.8049C84.8021 14.5546 84.9029 12.2036 84.8693 9.85251C84.735 9.71817 84.6342 9.55024 84.6342 9.34872V8.50906C83.7945 6.56104 83.9625 4.00847 83.7945 1.99329C83.7609 1.2208 84.735 1.15362 85.1044 1.65742C85.4067 2.06046 85.6418 2.53067 85.8433 3.00088V2.12763C85.8433 1.18721 87.1196 1.25438 87.2539 2.12763Z" fill="#F56700"></path><path d="M118.401 17.3423C118.468 19.8613 116.722 22.1787 114.438 23.1527C111.751 24.2611 108.762 24.2947 105.907 24.1939C104.328 24.429 102.716 24.597 101.137 24.6306C100.163 24.6641 99.1559 24.6977 98.1483 24.5634C97.7117 24.4962 97.2414 24.429 96.8384 24.2275C96.5025 24.4962 95.8644 24.3619 95.8308 23.7909C95.8308 23.6565 95.8308 23.4886 95.7972 23.3543C95.5621 23.2871 95.327 23.1192 95.2934 22.7833C94.8904 19.156 94.5881 15.4615 94.5881 11.7669V11.599C94.5881 8.50906 94.8568 5.38552 95.4949 2.36274C95.4278 2.06046 95.5285 1.72459 95.8308 1.62383C95.9652 1.52308 96.1667 1.48949 96.3346 1.52308C98.9208 1.35514 101.574 1.2208 104.16 1.42232C106.612 1.62383 109.299 2.02687 111.314 3.57185C111.684 3.84054 112.187 4.54585 112.691 5.45269C113.229 5.85573 113.699 6.39311 114.001 6.99767C114.438 7.87091 114.438 8.77775 114.169 9.61741C114.303 10.6922 114.068 11.5318 113.229 11.7669C113.833 12.0356 114.438 12.3043 115.009 12.6402C116.755 13.6142 118.367 15.1928 118.401 17.3423ZM112.255 7.19918C112.154 6.93049 112.019 6.6618 111.885 6.4267C110.81 5.48628 109.366 4.94889 108.056 4.51227C106.008 3.87413 103.858 3.80695 101.708 3.63902C100.13 3.53826 98.4841 3.50467 96.9392 3.87413C97.1743 6.15801 97.2414 8.13961 97.2079 10.4571C99.5253 9.91969 102.111 9.95327 104.362 10.0876C106.814 10.1884 109.433 10.4907 111.852 11.2631C111.818 11.0952 111.885 10.9273 112.019 10.7593C112.389 10.3563 112.725 9.8861 112.926 9.3823C112.792 8.54264 112.355 7.46788 112.255 7.19918ZM97.0063 22.8841C99.9284 22.5146 102.985 22.9176 105.94 23.0184C108.258 22.6825 110.609 22.1452 112.792 21.3391C114.203 20.8017 116.789 19.8949 116.856 18.0476C116.957 15.7301 114.774 14.3531 112.826 13.5806C110.172 12.5394 107.217 12.1364 104.362 12.0356C102.078 11.9685 99.5925 11.9349 97.4094 12.7409C97.3086 12.7745 97.2079 12.7745 97.1407 12.7745C97.0399 15.9652 96.9056 19.1224 96.9728 22.2795C96.9728 22.481 97.0063 22.6825 97.0063 22.8841Z" fill="#F56700"></path><path d="M140.118 2.12763C140.924 2.12763 140.924 3.37033 140.118 3.40392C136.961 3.47109 133.77 3.50467 130.613 3.53826C130.58 4.00847 130.58 4.47868 130.546 4.94889C130.68 4.98248 130.781 5.01607 130.882 5.11683C132.662 6.76256 132.091 9.91969 131.99 12.7409C131.856 15.9317 131.688 19.1895 131.99 22.3803C133.871 22.3131 135.718 22.3131 137.633 22.1787C137.868 22.1452 138.137 22.1116 138.405 22.1116C138.909 22.1116 139.077 22.5818 138.943 22.9512C139.144 22.9512 139.312 22.9176 139.514 22.9176C140.32 22.8505 140.32 24.0932 139.514 24.1603C135.181 24.5298 130.848 24.1268 126.516 24.3954C126.18 24.3954 126.012 24.2275 125.945 23.9924H125.508C124.131 24.0596 122.687 24.1939 121.377 23.7909C120.604 23.5894 120.94 22.3803 121.713 22.5818C123.056 22.9848 124.601 22.7833 125.978 22.7497C127.221 22.6825 128.464 22.6154 129.74 22.5146C129.673 22.4138 129.606 22.3131 129.606 22.1787C129.236 18.4506 129.169 14.4539 129.203 10.5242C129.068 8.17319 129.035 5.78855 129.303 3.57185C127.624 3.57185 125.911 3.60543 121.377 3.60543C120.907 3.60543 120.672 3.13522 120.806 2.76577C120.302 2.53067 120.537 1.59025 121.142 1.59025H121.31C126.381 1.59025 131.554 2.1948 136.592 1.48949C137.062 1.42232 137.364 1.82535 137.398 2.1948C138.305 2.16122 139.211 2.16122 140.118 2.12763Z" fill="#F56700"></path><path d="M167.886 3.26957C168.692 3.30316 168.692 4.54585 167.886 4.51227L157.038 4.31075C157.138 6.39311 157.239 8.44188 157.306 10.5242C157.508 11.599 157.642 12.6738 157.777 13.7485C158.112 16.7377 157.944 19.7269 158.18 22.7161C158.247 23.1527 157.877 23.3543 157.541 23.3207C157.541 23.5222 157.575 23.6901 157.609 23.8916C157.709 24.6641 156.5 25 156.4 24.2275V24.1268C156.064 24.4626 155.425 24.4962 155.325 23.9252C154.216 17.4431 154.855 10.8601 154.855 4.27716C151.026 4.20999 147.197 4.1764 143.368 4.1764C142.562 4.1764 142.562 2.93371 143.368 2.90012C143.67 2.90012 143.939 2.86653 144.208 2.83295C144.107 2.4635 144.443 1.92611 144.98 1.99329C148.607 2.49708 152.268 2.1948 155.929 1.89253C156.131 1.75818 156.433 1.72459 156.635 1.85894C160.329 1.55666 163.99 1.32156 167.651 1.92611C168.155 2.02687 168.256 2.83295 167.785 3.06805L167.349 3.26957H167.886Z" fill="#F56700"></path><path d="M26.3326 16.7041C26.702 18.182 27.273 19.6598 27.4745 21.1711C27.5417 21.7085 26.87 21.9436 26.5005 21.7421L26.1982 21.5742C26.0303 21.6414 25.896 21.7421 25.728 21.8429C25.6273 22.1116 25.3586 22.2123 25.0899 22.1787C21.0595 24.3283 16.3574 25.5374 11.8233 24.6306C8.56536 23.9588 5.509 22.1787 3.7625 19.3239C2.38546 18.1148 1.37787 16.637 1.10917 14.8233C0.672551 12.0356 1.57938 8.84492 3.22512 6.59463C4.87086 4.41151 7.18832 2.90012 9.77448 1.9597C14.5773 0.280377 20.0855 1.12004 25.0899 2.09404C25.1571 2.09404 25.1907 2.12763 25.2578 2.12763C25.6609 2.1948 25.7616 2.53067 25.6945 2.83295C25.7616 3.13522 25.6273 3.50467 25.2578 3.60543C25.2242 3.60543 25.1907 3.60543 25.1571 3.63902L26.1311 4.04206C26.7356 4.31075 26.3998 5.25117 25.7952 5.25117C23.2762 5.21758 20.9252 4.37792 18.507 3.2024C15.7193 2.90012 12.898 3.16881 10.5134 4.20999C7.89364 5.35193 5.54259 7.19918 4.40065 9.85251C3.22512 12.5394 3.25871 15.7637 4.66934 18.3163C5.87845 19.4247 7.32267 20.2643 8.76688 20.9025C11.4874 22.078 14.5102 22.7497 17.4658 22.7161C19.8168 22.7161 22.4702 22.3131 24.1831 20.533C24.0487 19.9284 23.9815 19.3239 24.0487 18.7193C24.1495 17.6782 24.3174 16.637 24.3174 15.5958C24.3174 15.2599 24.5189 15.0584 24.754 14.9912C24.754 14.6554 24.7876 14.3195 24.7876 13.9836C22.235 14.3867 19.5145 14.0844 16.9284 14.0844C16.1223 14.0844 16.1223 12.7745 16.9284 12.7745H17.1299C16.962 12.4051 17.1635 11.8677 17.7009 11.8677C20.2534 11.8677 22.7724 11.7334 25.325 12.0692C25.4593 12.1028 25.5601 12.1364 25.6273 12.2036C26.0303 12.17 26.4334 12.1364 26.8364 12.0692C27.6761 11.9685 27.9447 13.0096 27.1723 13.3119C26.8364 13.4463 26.5341 13.547 26.1982 13.6478C26.299 14.689 26.3326 15.6966 26.3326 16.7041Z" stroke="#F56700" stroke-width="2" mask="url(#path-1-outside-1_79_9250)"></path><path d="M58.415 22.9176C59.4898 22.9512 59.4898 24.597 58.415 24.597C54.8884 24.597 52.2015 21.8429 49.884 19.4582C48.8429 18.3835 47.8353 17.2415 46.6262 16.3683C45.988 15.8981 45.2827 15.4279 44.5438 15.2263C42.5286 15.2599 40.144 15.092 37.625 14.8233V14.8905C37.7257 18.2491 38.2295 21.4063 36.8861 24.597C36.651 25.1343 35.6434 25.1343 35.4083 24.597C33.8633 21.0368 34.5686 17.3087 34.7701 13.6142C34.9381 9.8861 34.5686 6.82973 34.6694 3.10164C34.703 2.22839 35.8449 2.06046 36.2144 2.63143C36.2815 2.59784 36.3151 2.59784 36.3487 2.56425C38.3303 1.55666 40.7821 1.38873 42.9652 1.42232C45.6521 1.4559 48.4062 1.82535 50.9924 2.63143C53.1419 3.30316 55.6273 4.31075 56.87 6.32594C58.1463 8.44188 57.5082 11.3303 55.6273 12.6738C53.8808 13.9165 51.4962 14.5546 49.078 14.8569C49.3467 14.9912 49.6153 15.1592 49.884 15.3607C51.0931 16.2339 51.9328 17.4431 52.9068 18.5514C53.8472 19.559 54.519 20.0628 55.5601 21.4063C55.9968 21.9772 57.2059 22.8841 58.415 22.9176ZM37.4906 5.58704C37.8265 8.24036 37.625 10.4907 37.5914 12.9761C40.144 13.144 42.7637 13.4127 45.3499 13.3791C48.1711 13.1776 51.026 12.5394 53.0076 11.0952C53.545 10.6922 54.0152 10.0876 54.2167 9.44948C54.351 9.08003 54.4182 8.74416 54.351 8.50906C54.1495 7.77015 53.5114 7.1656 52.7725 6.72897C50.4886 5.35193 47.6337 4.78096 45.014 4.44509C42.5286 4.14282 39.8417 3.90771 37.3563 4.37792C37.054 4.44509 37.4235 5.11683 37.4906 5.58704Z" stroke="#F56700" stroke-width="2" mask="url(#path-1-outside-1_79_9250)"></path><path d="M87.2539 2.12763C87.4555 3.70619 87.657 5.48628 87.4891 7.19918C87.5226 8.10602 87.489 9.01285 87.3547 9.8861C87.3211 10.1212 87.1868 10.2556 86.9852 10.3227C87.0188 12.0356 86.9852 13.7485 86.7837 15.4279C86.5486 17.3087 86.0784 19.1895 85.0708 20.8017C84.6006 21.6078 84.0632 22.3467 83.2236 22.7497C82.7198 22.9512 82.216 23.1192 81.6786 23.2535L81.3091 23.455C78.1184 25.2351 73.853 25.2351 70.5279 23.7573C66.9677 22.1787 64.8182 18.6186 64.0793 14.8569C63.2396 10.625 63.9114 6.22518 63.9114 1.9597C63.9114 1.05287 65.322 0.985691 65.322 1.9597V2.56425C65.5571 2.22839 66.4639 2.02687 66.4639 3.26957C66.4639 5.55345 66.7998 10.7929 67.27 13.0096C67.673 14.8905 67.7066 17.1408 68.7142 18.8201C69.8562 20.8017 71.9049 21.5406 74.0545 21.7757C76.0361 22.0108 78.0848 22.1787 80.0664 22.0444C80.3687 22.0108 80.7382 22.0108 81.1076 21.9436C82.8541 20.7345 83.7945 18.8201 84.2647 16.8049C84.8021 14.5546 84.9029 12.2036 84.8693 9.85251C84.735 9.71817 84.6342 9.55024 84.6342 9.34872V8.50906C83.7945 6.56104 83.9625 4.00847 83.7945 1.99329C83.7609 1.2208 84.735 1.15362 85.1044 1.65742C85.4067 2.06046 85.6418 2.53067 85.8433 3.00088V2.12763C85.8433 1.18721 87.1196 1.25438 87.2539 2.12763Z" stroke="#F56700" stroke-width="2" mask="url(#path-1-outside-1_79_9250)"></path><path d="M118.401 17.3423C118.468 19.8613 116.722 22.1787 114.438 23.1527C111.751 24.2611 108.762 24.2947 105.907 24.1939C104.328 24.429 102.716 24.597 101.137 24.6306C100.163 24.6641 99.1559 24.6977 98.1483 24.5634C97.7117 24.4962 97.2414 24.429 96.8384 24.2275C96.5025 24.4962 95.8644 24.3619 95.8308 23.7909C95.8308 23.6565 95.8308 23.4886 95.7972 23.3543C95.5621 23.2871 95.327 23.1192 95.2934 22.7833C94.8904 19.156 94.5881 15.4615 94.5881 11.7669V11.599C94.5881 8.50906 94.8568 5.38552 95.4949 2.36274C95.4278 2.06046 95.5285 1.72459 95.8308 1.62383C95.9652 1.52308 96.1667 1.48949 96.3346 1.52308C98.9208 1.35514 101.574 1.2208 104.16 1.42232C106.612 1.62383 109.299 2.02687 111.314 3.57185C111.684 3.84054 112.187 4.54585 112.691 5.45269C113.229 5.85573 113.699 6.39311 114.001 6.99767C114.438 7.87091 114.438 8.77775 114.169 9.61741C114.303 10.6922 114.068 11.5318 113.229 11.7669C113.833 12.0356 114.438 12.3043 115.009 12.6402C116.755 13.6142 118.367 15.1928 118.401 17.3423ZM112.255 7.19918C112.154 6.93049 112.019 6.6618 111.885 6.4267C110.81 5.48628 109.366 4.94889 108.056 4.51227C106.008 3.87413 103.858 3.80695 101.708 3.63902C100.13 3.53826 98.4841 3.50467 96.9392 3.87413C97.1743 6.15801 97.2414 8.13961 97.2079 10.4571C99.5253 9.91969 102.111 9.95327 104.362 10.0876C106.814 10.1884 109.433 10.4907 111.852 11.2631C111.818 11.0952 111.885 10.9273 112.019 10.7593C112.389 10.3563 112.725 9.8861 112.926 9.3823C112.792 8.54264 112.355 7.46788 112.255 7.19918ZM97.0063 22.8841C99.9284 22.5146 102.985 22.9176 105.94 23.0184C108.258 22.6825 110.609 22.1452 112.792 21.3391C114.203 20.8017 116.789 19.8949 116.856 18.0476C116.957 15.7301 114.774 14.3531 112.826 13.5806C110.172 12.5394 107.217 12.1364 104.362 12.0356C102.078 11.9685 99.5925 11.9349 97.4094 12.7409C97.3086 12.7745 97.2079 12.7745 97.1407 12.7745C97.0399 15.9652 96.9056 19.1224 96.9728 22.2795C96.9728 22.481 97.0063 22.6825 97.0063 22.8841Z" stroke="#F56700" stroke-width="2" mask="url(#path-1-outside-1_79_9250)"></path><path d="M140.118 2.12763C140.924 2.12763 140.924 3.37033 140.118 3.40392C136.961 3.47109 133.77 3.50467 130.613 3.53826C130.58 4.00847 130.58 4.47868 130.546 4.94889C130.68 4.98248 130.781 5.01607 130.882 5.11683C132.662 6.76256 132.091 9.91969 131.99 12.7409C131.856 15.9317 131.688 19.1895 131.99 22.3803C133.871 22.3131 135.718 22.3131 137.633 22.1787C137.868 22.1452 138.137 22.1116 138.405 22.1116C138.909 22.1116 139.077 22.5818 138.943 22.9512C139.144 22.9512 139.312 22.9176 139.514 22.9176C140.32 22.8505 140.32 24.0932 139.514 24.1603C135.181 24.5298 130.848 24.1268 126.516 24.3954C126.18 24.3954 126.012 24.2275 125.945 23.9924H125.508C124.131 24.0596 122.687 24.1939 121.377 23.7909C120.604 23.5894 120.94 22.3803 121.713 22.5818C123.056 22.9848 124.601 22.7833 125.978 22.7497C127.221 22.6825 128.464 22.6154 129.74 22.5146C129.673 22.4138 129.606 22.3131 129.606 22.1787C129.236 18.4506 129.169 14.4539 129.203 10.5242C129.068 8.17319 129.035 5.78855 129.303 3.57185C127.624 3.57185 125.911 3.60543 121.377 3.60543C120.907 3.60543 120.672 3.13522 120.806 2.76577C120.302 2.53067 120.537 1.59025 121.142 1.59025H121.31C126.381 1.59025 131.554 2.1948 136.592 1.48949C137.062 1.42232 137.364 1.82535 137.398 2.1948C138.305 2.16122 139.211 2.16122 140.118 2.12763Z" stroke="#F56700" stroke-width="2" mask="url(#path-1-outside-1_79_9250)"></path><path d="M167.886 3.26957C168.692 3.30316 168.692 4.54585 167.886 4.51227L157.038 4.31075C157.138 6.39311 157.239 8.44188 157.306 10.5242C157.508 11.599 157.642 12.6738 157.777 13.7485C158.112 16.7377 157.944 19.7269 158.18 22.7161C158.247 23.1527 157.877 23.3543 157.541 23.3207C157.541 23.5222 157.575 23.6901 157.609 23.8916C157.709 24.6641 156.5 25 156.4 24.2275V24.1268C156.064 24.4626 155.425 24.4962 155.325 23.9252C154.216 17.4431 154.855 10.8601 154.855 4.27716C151.026 4.20999 147.197 4.1764 143.368 4.1764C142.562 4.1764 142.562 2.93371 143.368 2.90012C143.67 2.90012 143.939 2.86653 144.208 2.83295C144.107 2.4635 144.443 1.92611 144.98 1.99329C148.607 2.49708 152.268 2.1948 155.929 1.89253C156.131 1.75818 156.433 1.72459 156.635 1.85894C160.329 1.55666 163.99 1.32156 167.651 1.92611C168.155 2.02687 168.256 2.83295 167.785 3.06805L167.349 3.26957H167.886Z" stroke="#F56700" stroke-width="2" mask="url(#path-1-outside-1_79_9250)"></path></svg>
</div><div></div></div></div><div class="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-6 css-gj1fbr-MuiGrid-root"><div class="MuiBox-root css-oefu87">
<div class="MuiBox-root css-audu86"><p class="MuiTypography-root MuiTypography-body1 css-1r8i917-MuiTypography-root">Date: ${formatDateToLocalDatString(
      new Date()
    )}</p></div><div class="MuiBox-root css-k008qs"><p class="MuiTypography-root MuiTypography-body1 css-1r8i917-MuiTypography-root">Order date: ${formatDateToLocalDatString(
      date
    )}</p></div></div></div></div>

     <table style="width: 100%; border-collapse: collapse; font-family: Arial, sans-serif;">
        <thead>
        <tr>
        <th style="border: 1px solid #dddddd; padding: 8px; background-color: #f2f2f2;">        <strong>Order ID</strong></th>
                <th style="border: 1px solid #dddddd; padding: 8px; background-color: #f2f2f2;"> <strong>Customer Name </strong></th>
                <th style="border: 1px solid #dddddd; padding: 8px; background-color: #f2f2f2;"><strong>Pickup Station</strong></th>
                <th style="border: 1px solid #dddddd; padding: 8px; background-color: #f2f2f2;"><strong>Pickup Date</strong></th>
                <th style="border: 1px solid #dddddd; padding: 8px; background-color: #f2f2f2;"><strong>Meal Ordered</strong></th>
                <th style="border: 1px solid #dddddd; padding: 8px; background-color: #f2f2f2;"><strong>QTY</strong></th>
                <th style="border: 1px solid #dddddd; padding: 8px; background-color: #f2f2f2;"><strong>Total</strong></th>
                <th style="border: 1px solid #dddddd; padding: 8px; background-color: #f2f2f2;"><strong>Status</strong></th>
            </tr>
      </thead>
        <tbody>
            
            ${orders?.orders
              .map((row, idx) => {
                return row
                  .map((item, idx) => {
                    return `<tr
                    key={row.name}                   
                  >
                    ${
                      idx === 0
                        ? `<td style="border: 1px solid #dddddd; padding: 8px;" rowspan=${row.length}>#${item.orderId}</td>`
                        : ""
                    }
                    <td style="border: 1px solid #dddddd; padding: 8px;" align="left">
                      ${item?.order?.user?.firstName}
                      ${item?.order?.user?.lastName}
                    </td>
                   
                    <td style="border: 1px solid #dddddd; padding: 8px;" align="left">${
                      item?.order?.station?.name
                    }</td>
                    <td style="border: 1px solid #dddddd; padding: 8px;" align="left">
                      ${new Date(item.date).toLocaleDateString()}
                    </td>
                    
                    <td style="border: 1px solid #dddddd; padding: 8px;" align="left">
                      ${item?.name} ${
                      item?.type === "make-your-own" ? "with" : ""
                    } <br />
                    
                      ${item?.primaryOption?.primaryOption?.name || ""} <br />
                       
                      ${
                        item?.toppings.length > 0
                          ? item?.toppings
                              ?.map((topping) => {
                                return `${topping?.topping?.name}<br>`;
                              })
                              .join("")
                          : ""
                      }
                    </td>
                   
                    <td style="border: 1px solid #dddddd; padding: 8px;" align="left">${
                      item.quantity
                    }</td>
                    <td style="border: 1px solid #dddddd; padding: 8px;" align="left">
                      ${(Number(item.price) * Number(item.quantity)).toFixed(2)}
                    </td>

                    <td style="border: 1px solid #dddddd; padding: 8px;" align="left">${
                      item.order.deliveryStatus
                    }</td>
                  </tr>`;
                  })
                  .join("");
              })
              .join("")}
            
            
        </tbody>
    </table>
       </div>
       
       `;

    // Replace the body content with the table
    document.body.innerHTML = logoHTML;

    // Trigger the print dialog
    window.print();

    // Restore the original content
    document.body.innerHTML = originalContents;
    setLoading(true);
    router.reload();
  };

  const handleSinglePrint = (row) => {
    const printContents = tableRef.current.outerHTML; // Get the table HTML
    const originalContents = document.body.innerHTML;

    // Store the current page's HTML

    let logoHTML = `
       

     
            
            ${row
              .map((item, idx) => {
                return `
                <div>
        <p><strong>Name:</strong> ${item?.order?.user?.firstName} 
                      ${item?.order?.user?.lastName}</p>
        <p><strong>Mobile Number:</strong> ${item?.order?.user?.phoneNumber}</p>
        <p><strong>Pickup Location:</strong> ${item?.order?.station?.name}</p>
        <p><strong>QTY:</strong> ${item?.quantity}</p>
        <p><strong>Ordered Food:</strong></p>
        <p>
           ${item?.name} ${item?.type === "make-your-own" ? "with" : ""} <br />
                    
                      ${item?.primaryOption?.primaryOption?.name || ""} <br />
                       
                      ${
                        item?.toppings.length > 0
                          ? item?.toppings
                              ?.map((topping) => {
                                return `${topping?.topping?.name}<br>`;
                              })
                              .join("")
                          : ""
                      }
             <br>
        </p>
    </div>
                
                
                
                `;
              })
              .join("")}
            
            
        </tbody>
    </table>
       </div>
       
       `;

    // Replace the body content with the table
    document.body.innerHTML = logoHTML;

    // Trigger the print dialog
    window.print();

    // Restore the original content
    document.body.innerHTML = originalContents;
    setLoading(true);
    router.reload();
  };

  const handleStatus = (id) => {
    setItemId(id);
    setOpen(true);
    setType("warning");
    setTitle("Change Status ");
    setMessage(
      "Are you sure you want to change status from ‘Completed’ back to ‘’Processing’ for this order?"
    );
  };

  const handleDelete = () => {
    setOpen(true);
    setType("warning");
    setTitle("Delete Order");
    setMessage("Are you sure you want to delete ?");
  };

  const changeOrderStatus = async () => {
    try {
      await changeOrder({ id: itemId });

      fetchOrders();
      setOpen(false);
    } catch (error) {
      toast.error("Something went wrong");
    }
  };

  return loading ? (
    <FallbackSpinner />
  ) : (
    <TableContainer component={Paper}>
      <IconButton
        onClick={handlePrint}
        variant="tontal"
        sx={{
          fontSize: "13px",
          fontFamily: "DM Sans",
          fontWeight: "600",
          borderRadius: "10px",
          border: "1px solid gray",
          marginLeft: "2rem",
        }}
      >
        {" "}
        <svg
          width={22}
          height={22}
          viewBox="0 0 22 22"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M15.5833 15.5833H17.4167C18.4292 15.5833 19.25 14.7625 19.25 13.75V10.0833C19.25 9.07081 18.4292 8.25 17.4167 8.25H4.58333C3.57081 8.25 2.75 9.07081 2.75 10.0833V13.75C2.75 14.7625 3.57081 15.5833 4.58333 15.5833H6.41667"
            stroke="#4B465C"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
          <path
            d="M15.5833 15.5833H17.4167C18.4292 15.5833 19.25 14.7625 19.25 13.75V10.0833C19.25 9.07081 18.4292 8.25 17.4167 8.25H4.58333C3.57081 8.25 2.75 9.07081 2.75 10.0833V13.75C2.75 14.7625 3.57081 15.5833 4.58333 15.5833H6.41667"
            stroke="white"
            strokeOpacity="0.2"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
          <path
            d="M15.5837 8.25V4.58333C15.5837 3.57081 14.7628 2.75 13.7503 2.75H8.25033C7.2378 2.75 6.41699 3.57081 6.41699 4.58333V8.25"
            stroke="#4B465C"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
          <path
            d="M15.5837 8.25V4.58333C15.5837 3.57081 14.7628 2.75 13.7503 2.75H8.25033C7.2378 2.75 6.41699 3.57081 6.41699 4.58333V8.25"
            stroke="white"
            strokeOpacity="0.2"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
          <rect
            x="6.41699"
            y="11.9165"
            width="9.16667"
            height="7.33333"
            rx={2}
            stroke="#4B465C"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
          <rect
            x="6.41699"
            y="11.9165"
            width="9.16667"
            height="7.33333"
            rx={2}
            stroke="white"
            strokeOpacity="0.2"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
        </svg>
        Print Table
      </IconButton>

      {/* <Table  sx={{ minWidth: 650 }} aria-label='simple table'>
        <TableHead>
          <TableRow>
            <TableCell sx={{paddingLeft:"0.5em"}}>ID</TableCell>
            <TableCell sx={{paddingLeft:"0.5em"}}>Name</TableCell>
            <TableCell sx={{paddingLeft:"0.5em"}} align='left'>Pickup Location</TableCell>
            <TableCell sx={{paddingLeft:"0.5em"}} align='left'>Pickup Date</TableCell>
            <TableCell sx={{paddingLeft:"0.5em"}} align='left'>Type</TableCell>
            <TableCell sx={{paddingLeft:"0.5em"}} align='left'>Primary Option</TableCell>
            <TableCell sx={{paddingLeft:"0.5em"}} align='left'>Toppings</TableCell>
            <TableCell sx={{paddingLeft:"0.5em"}} align='left'>Quantity</TableCell>
            <TableCell sx={{paddingLeft:"0.5em"}} align='left'>Total</TableCell>
            <TableCell sx={{paddingLeft:"0.5em"}} align='left'>Status</TableCell>

          </TableRow>
        </TableHead>
        <TableBody>
          {orders?.orderswithPagination?.map((row,idx) => {
            console.log(row);
            
            return row?.map((item,idx)=>{
              return <TableRow
              key={row.name}
              sx={{
                '&:last-of-type td, &:last-of-type th': {
                  border: 0
                }
              }}
            >
              {idx === 0 && <TableCell sx={{paddingLeft:"0.5em"}} rowSpan={row.length}>#{item.orderId}</TableCell>}
              <TableCell sx={{paddingLeft:"0.5em"}} align='left'>{item?.name}</TableCell>
              <TableCell sx={{paddingLeft:"0.5em"}} align='left'>{item?.order?.station?.name}</TableCell>
              <TableCell sx={{paddingLeft:"0.5em"}} align='left'>{new Date(item.date).toLocaleDateString()}</TableCell>
              <TableCell sx={{paddingLeft:"0.5em"}} align='left'>{item.type}</TableCell>
              <TableCell sx={{paddingLeft:"0.5em"}} align='left'>{item?.primaryOption?.primaryOption?.name || 'N/A'}</TableCell>
              <TableCell sx={{paddingLeft:"0.5em"}} align='left'>{item?.toppings.length > 0 ? item?.toppings?.map(topping=>{
                return <Typography>
                  {topping.name}
                </Typography>
              }) : 'N/A'}</TableCell>
              <TableCell sx={{paddingLeft:"0.5em"}} align='left'>{item.quantity}</TableCell>
              <TableCell sx={{paddingLeft:"0.5em"}} align='left'>{(Number(item.price) * Number(item.quantity)).toFixed(2)}</TableCell>
    

              <TableCell sx={{paddingLeft:"0.5em"}} align='left'>
                <Chip
                  rounded
                  size='small'
                  skin='light'
                  color={
                    item.order.deliveryStatus === 'Processing'
                      ? 'warning'
                      : item.order.deliveryStatus === 'Successful'
                      ? 'primary'
                      : 'error'
                  }
                  label={
                    item.order.deliveryStatus === 'Processing' || item.order.deliveryStatus === 'Successful'
                      ? item.order.deliveryStatus
                      : 'Payment Pending'
                  }
                  sx={{ '& .MuiChip-label': { textTransform: 'capitalize' } }}
                />
              </TableCell>
          
            </TableRow>
            })

            
          })}
        </TableBody>
      </Table> */}

      <Table
        ref={tableRef}
        sx={{ borderCollapse: "collapse" }}
        aria-label="simple table"
      >
        <TableHead>
          <TableRow>
            <TableCell sx={{ paddingLeft: "0.5em" }}>ID</TableCell>
            <TableCell sx={{ paddingLeft: "0.5em" }}>Customer Name</TableCell>
            {/* <TableCell sx={{paddingLeft:"0.5em"}}>Food Item</TableCell> */}
            <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
              Pickup Station
            </TableCell>
            <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
              Pickup Date
            </TableCell>
            <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
              Meal Ordered
            </TableCell>
            {/* <TableCell sx={{paddingLeft:"0.5em"}} align="left">Primary Option</TableCell> */}
            {/* <TableCell sx={{paddingLeft:"0.5em"}} align="left">Toppings</TableCell> */}
            <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
              Qty
            </TableCell>
            <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
              Total
            </TableCell>
            <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
              Status
            </TableCell>
            <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
              Action
            </TableCell>
            {/* <TableCell sx={{paddingLeft:"0.5em"}} align='center'>ACTIONS</TableCell> */}
          </TableRow>
        </TableHead>
        <TableBody>
          {orders?.orders?.map((row, idx) => {
            console.log(row);

            return row?.map((item, idx) => {
              return (
                <TableRow
                  key={row.name}
                  sx={{
                    "&:last-of-type td, &:last-of-type th": {
                      border: 0,
                    },
                  }}
                >
                  {idx === 0 && (
                    <TableCell
                      sx={{ paddingLeft: "0.5em" }}
                      rowSpan={row.length}
                    >
                      #{item.orderId}
                    </TableCell>
                  )}
                  <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
                    {item?.order?.user?.firstName} {item?.order?.user?.lastName}
                  </TableCell>
                  {/* <TableCell sx={{paddingLeft:"0.5em"}} align="left">{item?.name}</TableCell> */}
                  <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
                    {item?.order?.station?.name}
                  </TableCell>
                  <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
                    {new Date(item.date).toLocaleDateString()}
                  </TableCell>
                  {/* <TableCell sx={{paddingLeft:"0.5em"}} align="left">{item.type}</TableCell> */}
                  <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
                    {item?.name} <br />
                    {
                      <Typography
                        component={ListItem}
                        sx={{ fontSize: "12px", color: "primary" }}
                      >
                        {item?.primaryOption?.primaryOption?.name || ""}
                      </Typography>
                    }
                    {item?.toppings.length > 0
                      ? item?.toppings?.map((topping) => {
                          return (
                            <Typography
                              key={"toping" + topping.id}
                              component={ListItem}
                              sx={{
                                fontSize: "12px",
                                lineHeight: "10px",
                                color: "primary",
                              }}
                            >
                              {topping?.topping?.name}
                            </Typography>
                          );
                        })
                      : ""}
                  </TableCell>
                  {/* <TableCell sx={{paddingLeft:"0.5em"}} align="left"></TableCell> */}
                  <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
                    {item.quantity}
                  </TableCell>
                  <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
                    {(Number(item.price) * Number(item.quantity)).toFixed(2)}
                  </TableCell>

                  <TableCell sx={{ paddingLeft: "0.5em" }} align="left">
                    <Chip
                      rounded
                      size="small"
                      skin="light"
                      color={
                        item.status === "Processing" || item.status == null
                          ? "warning"
                          : item.status === "Successful"
                          ? "primary"
                          : "error"
                      }
                      label={
                        item.status === "Processing" || item.status == null ||
                        item.status === "Successful"
                          ? item.status
                          : "Payment Pending"
                      }
                      sx={{
                        "& .MuiChip-label": { textTransform: "capitalize" },
                      }}
                    />
                  </TableCell>
                  <TableCell >
                    <Box sx={{
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  width: "100%",
                }}>
<svg
                      onClick={() => handleSinglePrint(row)}
                      width={22}
                      height={22}
                      cursor={"pointer"}
                      viewBox="0 0 22 22"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M15.5833 15.5833H17.4167C18.4292 15.5833 19.25 14.7625 19.25 13.75V10.0833C19.25 9.07081 18.4292 8.25 17.4167 8.25H4.58333C3.57081 8.25 2.75 9.07081 2.75 10.0833V13.75C2.75 14.7625 3.57081 15.5833 4.58333 15.5833H6.41667"
                        stroke="#4B465C"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                      <path
                        d="M15.5833 15.5833H17.4167C18.4292 15.5833 19.25 14.7625 19.25 13.75V10.0833C19.25 9.07081 18.4292 8.25 17.4167 8.25H4.58333C3.57081 8.25 2.75 9.07081 2.75 10.0833V13.75C2.75 14.7625 3.57081 15.5833 4.58333 15.5833H6.41667"
                        stroke="white"
                        strokeOpacity="0.2"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                      <path
                        d="M15.5837 8.25V4.58333C15.5837 3.57081 14.7628 2.75 13.7503 2.75H8.25033C7.2378 2.75 6.41699 3.57081 6.41699 4.58333V8.25"
                        stroke="#4B465C"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                      <path
                        d="M15.5837 8.25V4.58333C15.5837 3.57081 14.7628 2.75 13.7503 2.75H8.25033C7.2378 2.75 6.41699 3.57081 6.41699 4.58333V8.25"
                        stroke="white"
                        strokeOpacity="0.2"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                      <rect
                        x="6.41699"
                        y="11.9165"
                        width="9.16667"
                        height="7.33333"
                        rx={2}
                        stroke="#4B465C"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                      <rect
                        x="6.41699"
                        y="11.9165"
                        width="9.16667"
                        height="7.33333"
                        rx={2}
                        stroke="white"
                        strokeOpacity="0.2"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>

                    {(item?.status == "Processing" || item?.status == null) && (
                    <Tooltip title="Mark Successful">
                      <IconButton
                        size="small"
                        onClick={() => {
                          handleStatus(item.id);
                        }}
                      >
                        <svg
                          width={17}
                          height={12}
                          viewBox="0 0 17 12"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M1.58301 5.99984L6.16634 10.5832L15.333 1.4165"
                            stroke="#6F6B7D"
                            strokeWidth={2}
                            strokeLinecap="round"
                            strokeLinejoin="round"
                          />
                        </svg>
                      </IconButton>
                    </Tooltip>
                  )}

                  {item?.status == "Successful" && (
                    <Tooltip title="Mark Processing">
                      <IconButton
                        color="text.error !important"
                        onClick={() => {
                          handleStatus(item.id);
                        }}
                        size="small"
                      >
                        <Icon
                          icon={"tabler:x"}
                          color="warning !important"
                          fontSize={20}
                        />
                      </IconButton>
                    </Tooltip>
                  )}
                    </Box>
                    
                  </TableCell>
                  {/* <TableCell sx={{paddingLeft:"0.5em"}} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%' }}>
                  <Tooltip title='Print'>
                    <IconButton size='small' component={Link} href={`/admin/orders/${row.id}/print`}>
                      <svg width={22} height={22} viewBox='0 0 22 22' fill='none' xmlns='http://www.w3.org/2000/svg'>
                        <path
                          d='M15.5833 15.5833H17.4167C18.4292 15.5833 19.25 14.7625 19.25 13.75V10.0833C19.25 9.07081 18.4292 8.25 17.4167 8.25H4.58333C3.57081 8.25 2.75 9.07081 2.75 10.0833V13.75C2.75 14.7625 3.57081 15.5833 4.58333 15.5833H6.41667'
                          stroke='#4B465C'
                          strokeWidth='1.5'
                          strokeLinecap='round'
                          strokeLinejoin='round'
                        />
                        <path
                          d='M15.5833 15.5833H17.4167C18.4292 15.5833 19.25 14.7625 19.25 13.75V10.0833C19.25 9.07081 18.4292 8.25 17.4167 8.25H4.58333C3.57081 8.25 2.75 9.07081 2.75 10.0833V13.75C2.75 14.7625 3.57081 15.5833 4.58333 15.5833H6.41667'
                          stroke='white'
                          strokeOpacity='0.2'
                          strokeWidth='1.5'
                          strokeLinecap='round'
                          strokeLinejoin='round'
                        />
                        <path
                          d='M15.5837 8.25V4.58333C15.5837 3.57081 14.7628 2.75 13.7503 2.75H8.25033C7.2378 2.75 6.41699 3.57081 6.41699 4.58333V8.25'
                          stroke='#4B465C'
                          strokeWidth='1.5'
                          strokeLinecap='round'
                          strokeLinejoin='round'
                        />
                        <path
                          d='M15.5837 8.25V4.58333C15.5837 3.57081 14.7628 2.75 13.7503 2.75H8.25033C7.2378 2.75 6.41699 3.57081 6.41699 4.58333V8.25'
                          stroke='white'
                          strokeOpacity='0.2'
                          strokeWidth='1.5'
                          strokeLinecap='round'
                          strokeLinejoin='round'
                        />
                        <rect
                          x='6.41699'
                          y='11.9165'
                          width='9.16667'
                          height='7.33333'
                          rx={2}
                          stroke='#4B465C'
                          strokeWidth='1.5'
                          strokeLinecap='round'
                          strokeLinejoin='round'
                        />
                        <rect
                          x='6.41699'
                          y='11.9165'
                          width='9.16667'
                          height='7.33333'
                          rx={2}
                          stroke='white'
                          strokeOpacity='0.2'
                          strokeWidth='1.5'
                          strokeLinecap='round'
                          strokeLinejoin='round'
                        />
                      </svg>
                    </IconButton>
                  </Tooltip>

                  {row?.deliveryStatus == 'Processing' && (
                    <Tooltip title='Mark Successful'>
                      <IconButton
                        size='small'
                        onClick={() => {
                          handleStatus(row.id)
                        }}
                      >
                        <svg width={17} height={12} viewBox='0 0 17 12' fill='none' xmlns='http://www.w3.org/2000/svg'>
                          <path
                            d='M1.58301 5.99984L6.16634 10.5832L15.333 1.4165'
                            stroke='#6F6B7D'
                            strokeWidth={2}
                            strokeLinecap='round'
                            strokeLinejoin='round'
                          />
                        </svg>
                      </IconButton>
                    </Tooltip>
                  )}

                  {row?.deliveryStatus == 'Successful' && (
                    <Tooltip title='Mark Processing'>
                      <IconButton
                        color='text.error !important'
                        onClick={() => {
                          handleStatus(row.id)
                        }}
                        size='small'
                      >
                        <Icon icon={'tabler:x'} color='warning !important' fontSize={20} />
                      </IconButton>
                    </Tooltip>
                  )}

                  <Tooltip title='View'>
                    <IconButton size='small' component={Link} href={`/admin/orders/${row.id}/view`}>
                      <svg width='22' height='22' viewBox='0 0 22 22' fill='none' xmlns='http://www.w3.org/2000/svg'>
                        <circle
                          cx='11.0003'
                          cy='11.0013'
                          r='1.83333'
                          stroke='#4B465C'
                          stroke-width='1.5'
                          stroke-linecap='round'
                          stroke-linejoin='round'
                        />
                        <circle
                          cx='11.0003'
                          cy='11.0013'
                          r='1.83333'
                          stroke='white'
                          stroke-opacity='0.2'
                          stroke-width='1.5'
                          stroke-linecap='round'
                          stroke-linejoin='round'
                        />
                        <path
                          d='M20.1663 10.9987C17.7216 15.2768 14.6663 17.4154 10.9997 17.4154C7.33301 17.4154 4.27776 15.2768 1.83301 10.9987C4.27776 6.72061 7.33301 4.58203 10.9997 4.58203C14.6663 4.58203 17.7216 6.72061 20.1663 10.9987'
                          stroke='#4B465C'
                          stroke-width='1.5'
                          stroke-linecap='round'
                          stroke-linejoin='round'
                        />
                        <path
                          d='M20.1663 10.9987C17.7216 15.2768 14.6663 17.4154 10.9997 17.4154C7.33301 17.4154 4.27776 15.2768 1.83301 10.9987C4.27776 6.72061 7.33301 4.58203 10.9997 4.58203C14.6663 4.58203 17.7216 6.72061 20.1663 10.9987'
                          stroke='white'
                          stroke-opacity='0.2'
                          stroke-width='1.5'
                          stroke-linecap='round'
                          stroke-linejoin='round'
                        />
                      </svg>
                    </IconButton>
                  </Tooltip>
                </Box>
              </TableCell> */}
                </TableRow>
              );
            });
          })}
        </TableBody>
      </Table>

      <Stack spacing={2} sx={{ padding: "2em" }}>
        {/* <Pagination
          count={orders?.totalPages}
          shape='rounded'
          onChange={handleChange}
          sx={{
            '& .MuiPaginationItem-root': {
              color: '#4B465C', // Default text color
              '&.Mui-selected': {
                backgroundColor: '#F56700', // Background color of selected page
                color: '#fff', // Selected page text color
                fontWeight: 'bold' // Selected page font weight
              },
              '&:hover': {
                backgroundColor: '#F56700',
                color: '#fff' // Selected page text color
                // Hover color
              }
            },
            '& .MuiPaginationItem-ellipsis': {
              color: '#555' // Color for ellipsis
            },
            '& .MuiPaginationItem-icon': {
              color: '#4B465C' // Color for arrow icons
            },

            '& .MuiPagination-ul': {
              justifyContent: 'end'
            }
          }}
        /> */}
      </Stack>
      {/* <MessageDialog type={type} open={open} title={title} message={message} setOpen={setOpen}  /> */}
      <WarningDialog
        open={open}
        title={title}
        message={message}
        setOpen={setOpen}
        successCallback={() => changeOrderStatus()}
      />
    </TableContainer>
  );
};

export default OrderItemList;
